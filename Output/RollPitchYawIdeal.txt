------------------ Ideal information ------------------
Number of generators: 7
Ideal dimension: 0
Ideal vars: {Cfi, Sfi, St, Cpsi, Spsi, x0}
Ideal coefficient: frac(QQ[y0, z0, z1, x1, y1, Ct])


Ideal generators: 


q1 = St^2+Ct^2-1

q2 = Cfi^2+Sfi^2-1

q3 = Cpsi^2+Spsi^2-1

q4 = -z1*Cfi*St*Cpsi-y1*Cfi*St*Spsi-x1*Ct*Cfi+y1*Sfi*Cpsi-z1*Sfi*Spsi+x0

q5 = -y1*Cfi*Cpsi+z1*Cfi*Spsi-z1*Sfi*St*Cpsi-y1*Sfi*St*Spsi-x1*Ct*Sfi+y0

q6 = x1*St-z1*Ct*Cpsi-y1*Ct*Spsi+z0

q7 = Cfi^2*St^2*Cpsi^2+Cfi^2*St^2*Spsi^2+Ct^2*Cfi^2*Cpsi^2+Ct^2*Cfi^2*Spsi^2+Sfi^2*St^2*Cpsi^2+Sfi^2*St^2*Spsi^2+Ct^2*Sfi^2*Cpsi^2+Ct^2*Sfi^2*Spsi^2-1

------------------ Groebner base information ------------------
Base size: 6
Groebner base: 


g1 = x0^2+y0^2+z0^2-z1^2-x1^2-y1^2

g2 = Spsi^4+((-4*z0*y1)/(z1^2*Ct+y1^2*Ct))*Spsi^3+((-2*z1^4*Ct^2-2*z1^2*x1^2*Ct^2-2*z1^2*y1^2*Ct^2+2*x1^2*y1^2*Ct^2+2*z0^2*z1^2+2*z1^2*x1^2+6*z0^2*y1^2-2*x1^2*y1^2)/(z1^4*Ct^2+2*z1^2*y1^2*Ct^2+y1^4*Ct^2))*Spsi^2+((4*z0*z1^2*y1*Ct^2-4*z0*x1^2*y1*Ct^2-4*z0^3*y1+4*z0*x1^2*y1)/(z1^4*Ct^3+2*z1^2*y1^2*Ct^3+y1^4*Ct^3))*Spsi+(z1^4*Ct^4+2*z1^2*x1^2*Ct^4+x1^4*Ct^4-2*z0^2*z1^2*Ct^2+2*z0^2*x1^2*Ct^2-2*z1^2*x1^2*Ct^2-2*x1^4*Ct^2+z0^4-2*z0^2*x1^2+x1^4)/(z1^4*Ct^4+2*z1^2*y1^2*Ct^4+y1^4*Ct^4)

g3 = Cpsi+((-z1^4*y1*Ct^2-2*z1^2*y1^3*Ct^2-y1^5*Ct^2)/(2*z1^3*y1^2*Ct^2+2*z1*x1^2*y1^2*Ct^2-2*z0^2*z1^3-2*z1*x1^2*y1^2))*Spsi^3+((-z0*z1^4*Ct+2*z0*z1^2*y1^2*Ct+3*z0*y1^4*Ct)/(2*z1^3*y1^2*Ct^2+2*z1*x1^2*y1^2*Ct^2-2*z0^2*z1^3-2*z1*x1^2*y1^2))*Spsi^2+((z1^4*y1*Ct^2+z1^2*x1^2*y1*Ct^2+3*z1^2*y1^3*Ct^2-x1^2*y1^3*Ct^2-z0^2*z1^2*y1-z1^2*x1^2*y1-3*z0^2*y1^3+x1^2*y1^3)/(2*z1^3*y1^2*Ct^2+2*z1*x1^2*y1^2*Ct^2-2*z0^2*z1^3-2*z1*x1^2*y1^2))*Spsi+(z0*z1^4*Ct^2+z0*z1^2*x1^2*Ct^2-3*z0*z1^2*y1^2*Ct^2+z0*x1^2*y1^2*Ct^2+z0^3*z1^2-z0*z1^2*x1^2+z0^3*y1^2-z0*x1^2*y1^2)/(2*z1^3*y1^2*Ct^3+2*z1*x1^2*y1^2*Ct^3-2*z0^2*z1^3*Ct-2*z1*x1^2*y1^2*Ct)

g4 = St+((-z1^4*y1*Ct^3-2*z1^2*y1^3*Ct^3-y1^5*Ct^3)/(2*z1^2*x1*y1^2*Ct^2+2*x1^3*y1^2*Ct^2-2*z0^2*z1^2*x1-2*x1^3*y1^2))*Spsi^3+((-z0*z1^4*Ct^2+2*z0*z1^2*y1^2*Ct^2+3*z0*y1^4*Ct^2)/(2*z1^2*x1*y1^2*Ct^2+2*x1^3*y1^2*Ct^2-2*z0^2*z1^2*x1-2*x1^3*y1^2))*Spsi^2+((z1^4*y1*Ct^3+z1^2*x1^2*y1*Ct^3+z1^2*y1^3*Ct^3-3*x1^2*y1^3*Ct^3+z0^2*z1^2*y1*Ct-z1^2*x1^2*y1*Ct-3*z0^2*y1^3*Ct+3*x1^2*y1^3*Ct)/(2*z1^2*x1*y1^2*Ct^2+2*x1^3*y1^2*Ct^2-2*z0^2*z1^2*x1-2*x1^3*y1^2))*Spsi+(z0*z1^4*Ct^2+z0*z1^2*x1^2*Ct^2-z0*z1^2*y1^2*Ct^2+3*z0*x1^2*y1^2*Ct^2-z0^3*z1^2-z0*z1^2*x1^2+z0^3*y1^2-3*z0*x1^2*y1^2)/(2*z1^2*x1*y1^2*Ct^2+2*x1^3*y1^2*Ct^2-2*z0^2*z1^2*x1-2*x1^3*y1^2)

g5 = Sfi+((-z1^4*y1^2*Ct^2-2*z1^2*y1^4*Ct^2-y1^6*Ct^2)/(2*z0^2*z1^3*y1^2*Ct^2-2*z1^5*y1^2*Ct^2+2*z0^2*z1*x1^2*y1^2*Ct^2-4*z1^3*x1^2*y1^2*Ct^2-2*z1*x1^4*y1^2*Ct^2-2*z1^3*y1^4*Ct^2-2*z1*x1^2*y1^4*Ct^2-2*z0^4*z1^3+2*z0^2*z1^5+2*z0^2*z1^3*x1^2+2*z0^2*z1^3*y1^2-2*z0^2*z1*x1^2*y1^2+2*z1^3*x1^2*y1^2+2*z1*x1^4*y1^2+2*z1*x1^2*y1^4))*Spsi^3*x0+((y0*z0*z1^4*y1*Ct^2+2*y0*z0*z1^2*y1^3*Ct^2+y0*z0*y1^5*Ct^2)/(2*z0^2*z1^2*x1*y1^2*Ct^2-2*z1^4*x1*y1^2*Ct^2+2*z0^2*x1^3*y1^2*Ct^2-4*z1^2*x1^3*y1^2*Ct^2-2*x1^5*y1^2*Ct^2-2*z1^2*x1*y1^4*Ct^2-2*x1^3*y1^4*Ct^2-2*z0^4*z1^2*x1+2*z0^2*z1^4*x1+2*z0^2*z1^2*x1^3+2*z0^2*z1^2*x1*y1^2-2*z0^2*x1^3*y1^2+2*z1^2*x1^3*y1^2+2*x1^5*y1^2+2*x1^3*y1^4))*Spsi^3+((-z0*z1^4*y1*Ct+2*z0*z1^2*y1^3*Ct+3*z0*y1^5*Ct)/(2*z0^2*z1^3*y1^2*Ct^2-2*z1^5*y1^2*Ct^2+2*z0^2*z1*x1^2*y1^2*Ct^2-4*z1^3*x1^2*y1^2*Ct^2-2*z1*x1^4*y1^2*Ct^2-2*z1^3*y1^4*Ct^2-2*z1*x1^2*y1^4*Ct^2-2*z0^4*z1^3+2*z0^2*z1^5+2*z0^2*z1^3*x1^2+2*z0^2*z1^3*y1^2-2*z0^2*z1*x1^2*y1^2+2*z1^3*x1^2*y1^2+2*z1*x1^4*y1^2+2*z1*x1^2*y1^4))*Spsi^2*x0+((y0*z0^2*z1^4*Ct-2*y0*z0^2*z1^2*y1^2*Ct-3*y0*z0^2*y1^4*Ct)/(2*z0^2*z1^2*x1*y1^2*Ct^2-2*z1^4*x1*y1^2*Ct^2+2*z0^2*x1^3*y1^2*Ct^2-4*z1^2*x1^3*y1^2*Ct^2-2*x1^5*y1^2*Ct^2-2*z1^2*x1*y1^4*Ct^2-2*x1^3*y1^4*Ct^2-2*z0^4*z1^2*x1+2*z0^2*z1^4*x1+2*z0^2*z1^2*x1^3+2*z0^2*z1^2*x1*y1^2-2*z0^2*x1^3*y1^2+2*z1^2*x1^3*y1^2+2*x1^5*y1^2+2*x1^3*y1^4))*Spsi^2+((3*z1^4*y1^2*Ct^2+3*z1^2*x1^2*y1^2*Ct^2+3*z1^2*y1^4*Ct^2-x1^2*y1^4*Ct^2-2*z0^2*z1^4-z0^2*z1^2*y1^2-3*z1^2*x1^2*y1^2-3*z0^2*y1^4+x1^2*y1^4)/(2*z0^2*z1^3*y1^2*Ct^2-2*z1^5*y1^2*Ct^2+2*z0^2*z1*x1^2*y1^2*Ct^2-4*z1^3*x1^2*y1^2*Ct^2-2*z1*x1^4*y1^2*Ct^2-2*z1^3*y1^4*Ct^2-2*z1*x1^2*y1^4*Ct^2-2*z0^4*z1^3+2*z0^2*z1^5+2*z0^2*z1^3*x1^2+2*z0^2*z1^3*y1^2-2*z0^2*z1*x1^2*y1^2+2*z1^3*x1^2*y1^2+2*z1*x1^4*y1^2+2*z1*x1^2*y1^4))*Spsi*x0+((-y0*z0*z1^4*y1*Ct^2-y0*z0*z1^2*x1^2*y1*Ct^2-y0*z0*z1^2*y1^3*Ct^2+3*y0*z0*x1^2*y1^3*Ct^2-y0*z0^3*z1^2*y1+y0*z0*z1^2*x1^2*y1+3*y0*z0^3*y1^3-3*y0*z0*x1^2*y1^3)/(2*z0^2*z1^2*x1*y1^2*Ct^2-2*z1^4*x1*y1^2*Ct^2+2*z0^2*x1^3*y1^2*Ct^2-4*z1^2*x1^3*y1^2*Ct^2-2*x1^5*y1^2*Ct^2-2*z1^2*x1*y1^4*Ct^2-2*x1^3*y1^4*Ct^2-2*z0^4*z1^2*x1+2*z0^2*z1^4*x1+2*z0^2*z1^2*x1^3+2*z0^2*z1^2*x1*y1^2-2*z0^2*x1^3*y1^2+2*z1^2*x1^3*y1^2+2*x1^5*y1^2+2*x1^3*y1^4))*Spsi+((z0*z1^4*y1*Ct^2+z0*z1^2*x1^2*y1*Ct^2-3*z0*z1^2*y1^3*Ct^2+z0*x1^2*y1^3*Ct^2+z0^3*z1^2*y1-z0*z1^2*x1^2*y1+z0^3*y1^3-z0*x1^2*y1^3)/(2*z0^2*z1^3*y1^2*Ct^3-2*z1^5*y1^2*Ct^3+2*z0^2*z1*x1^2*y1^2*Ct^3-4*z1^3*x1^2*y1^2*Ct^3-2*z1*x1^4*y1^2*Ct^3-2*z1^3*y1^4*Ct^3-2*z1*x1^2*y1^4*Ct^3-2*z0^4*z1^3*Ct+2*z0^2*z1^5*Ct+2*z0^2*z1^3*x1^2*Ct+2*z0^2*z1^3*y1^2*Ct-2*z0^2*z1*x1^2*y1^2*Ct+2*z1^3*x1^2*y1^2*Ct+2*z1*x1^4*y1^2*Ct+2*z1*x1^2*y1^4*Ct))*x0+(-y0*z0^2*z1^4*Ct^2-y0*z0^2*z1^2*x1^2*Ct^2+y0*z0^2*z1^2*y1^2*Ct^2-3*y0*z0^2*x1^2*y1^2*Ct^2+2*y0*z1^2*x1^2*y1^2*Ct^2+2*y0*x1^4*y1^2*Ct^2+y0*z0^4*z1^2-y0*z0^2*z1^2*x1^2-y0*z0^4*y1^2+3*y0*z0^2*x1^2*y1^2-2*y0*x1^4*y1^2)/(2*z0^2*z1^2*x1*y1^2*Ct^3-2*z1^4*x1*y1^2*Ct^3+2*z0^2*x1^3*y1^2*Ct^3-4*z1^2*x1^3*y1^2*Ct^3-2*x1^5*y1^2*Ct^3-2*z1^2*x1*y1^4*Ct^3-2*x1^3*y1^4*Ct^3-2*z0^4*z1^2*x1*Ct+2*z0^2*z1^4*x1*Ct+2*z0^2*z1^2*x1^3*Ct+2*z0^2*z1^2*x1*y1^2*Ct-2*z0^2*x1^3*y1^2*Ct+2*z1^2*x1^3*y1^2*Ct+2*x1^5*y1^2*Ct+2*x1^3*y1^4*Ct)

g6 = Cfi+((z0*z1^4*y1*Ct^2+2*z0*z1^2*y1^3*Ct^2+z0*y1^5*Ct^2)/(2*z0^2*z1^2*x1*y1^2*Ct^2-2*z1^4*x1*y1^2*Ct^2+2*z0^2*x1^3*y1^2*Ct^2-4*z1^2*x1^3*y1^2*Ct^2-2*x1^5*y1^2*Ct^2-2*z1^2*x1*y1^4*Ct^2-2*x1^3*y1^4*Ct^2-2*z0^4*z1^2*x1+2*z0^2*z1^4*x1+2*z0^2*z1^2*x1^3+2*z0^2*z1^2*x1*y1^2-2*z0^2*x1^3*y1^2+2*z1^2*x1^3*y1^2+2*x1^5*y1^2+2*x1^3*y1^4))*Spsi^3*x0+((y0*z1^4*y1^2*Ct^2+2*y0*z1^2*y1^4*Ct^2+y0*y1^6*Ct^2)/(2*z0^2*z1^3*y1^2*Ct^2-2*z1^5*y1^2*Ct^2+2*z0^2*z1*x1^2*y1^2*Ct^2-4*z1^3*x1^2*y1^2*Ct^2-2*z1*x1^4*y1^2*Ct^2-2*z1^3*y1^4*Ct^2-2*z1*x1^2*y1^4*Ct^2-2*z0^4*z1^3+2*z0^2*z1^5+2*z0^2*z1^3*x1^2+2*z0^2*z1^3*y1^2-2*z0^2*z1*x1^2*y1^2+2*z1^3*x1^2*y1^2+2*z1*x1^4*y1^2+2*z1*x1^2*y1^4))*Spsi^3+((z0^2*z1^4*Ct-2*z0^2*z1^2*y1^2*Ct-3*z0^2*y1^4*Ct)/(2*z0^2*z1^2*x1*y1^2*Ct^2-2*z1^4*x1*y1^2*Ct^2+2*z0^2*x1^3*y1^2*Ct^2-4*z1^2*x1^3*y1^2*Ct^2-2*x1^5*y1^2*Ct^2-2*z1^2*x1*y1^4*Ct^2-2*x1^3*y1^4*Ct^2-2*z0^4*z1^2*x1+2*z0^2*z1^4*x1+2*z0^2*z1^2*x1^3+2*z0^2*z1^2*x1*y1^2-2*z0^2*x1^3*y1^2+2*z1^2*x1^3*y1^2+2*x1^5*y1^2+2*x1^3*y1^4))*Spsi^2*x0+((y0*z0*z1^4*y1*Ct-2*y0*z0*z1^2*y1^3*Ct-3*y0*z0*y1^5*Ct)/(2*z0^2*z1^3*y1^2*Ct^2-2*z1^5*y1^2*Ct^2+2*z0^2*z1*x1^2*y1^2*Ct^2-4*z1^3*x1^2*y1^2*Ct^2-2*z1*x1^4*y1^2*Ct^2-2*z1^3*y1^4*Ct^2-2*z1*x1^2*y1^4*Ct^2-2*z0^4*z1^3+2*z0^2*z1^5+2*z0^2*z1^3*x1^2+2*z0^2*z1^3*y1^2-2*z0^2*z1*x1^2*y1^2+2*z1^3*x1^2*y1^2+2*z1*x1^4*y1^2+2*z1*x1^2*y1^4))*Spsi^2+((-z0*z1^4*y1*Ct^2-z0*z1^2*x1^2*y1*Ct^2-z0*z1^2*y1^3*Ct^2+3*z0*x1^2*y1^3*Ct^2-z0^3*z1^2*y1+z0*z1^2*x1^2*y1+3*z0^3*y1^3-3*z0*x1^2*y1^3)/(2*z0^2*z1^2*x1*y1^2*Ct^2-2*z1^4*x1*y1^2*Ct^2+2*z0^2*x1^3*y1^2*Ct^2-4*z1^2*x1^3*y1^2*Ct^2-2*x1^5*y1^2*Ct^2-2*z1^2*x1*y1^4*Ct^2-2*x1^3*y1^4*Ct^2-2*z0^4*z1^2*x1+2*z0^2*z1^4*x1+2*z0^2*z1^2*x1^3+2*z0^2*z1^2*x1*y1^2-2*z0^2*x1^3*y1^2+2*z1^2*x1^3*y1^2+2*x1^5*y1^2+2*x1^3*y1^4))*Spsi*x0+((-3*y0*z1^4*y1^2*Ct^2-3*y0*z1^2*x1^2*y1^2*Ct^2-3*y0*z1^2*y1^4*Ct^2+y0*x1^2*y1^4*Ct^2+2*y0*z0^2*z1^4+y0*z0^2*z1^2*y1^2+3*y0*z1^2*x1^2*y1^2+3*y0*z0^2*y1^4-y0*x1^2*y1^4)/(2*z0^2*z1^3*y1^2*Ct^2-2*z1^5*y1^2*Ct^2+2*z0^2*z1*x1^2*y1^2*Ct^2-4*z1^3*x1^2*y1^2*Ct^2-2*z1*x1^4*y1^2*Ct^2-2*z1^3*y1^4*Ct^2-2*z1*x1^2*y1^4*Ct^2-2*z0^4*z1^3+2*z0^2*z1^5+2*z0^2*z1^3*x1^2+2*z0^2*z1^3*y1^2-2*z0^2*z1*x1^2*y1^2+2*z1^3*x1^2*y1^2+2*z1*x1^4*y1^2+2*z1*x1^2*y1^4))*Spsi+((-z0^2*z1^4*Ct^2-z0^2*z1^2*x1^2*Ct^2+z0^2*z1^2*y1^2*Ct^2-3*z0^2*x1^2*y1^2*Ct^2+2*z1^2*x1^2*y1^2*Ct^2+2*x1^4*y1^2*Ct^2+z0^4*z1^2-z0^2*z1^2*x1^2-z0^4*y1^2+3*z0^2*x1^2*y1^2-2*x1^4*y1^2)/(2*z0^2*z1^2*x1*y1^2*Ct^3-2*z1^4*x1*y1^2*Ct^3+2*z0^2*x1^3*y1^2*Ct^3-4*z1^2*x1^3*y1^2*Ct^3-2*x1^5*y1^2*Ct^3-2*z1^2*x1*y1^4*Ct^3-2*x1^3*y1^4*Ct^3-2*z0^4*z1^2*x1*Ct+2*z0^2*z1^4*x1*Ct+2*z0^2*z1^2*x1^3*Ct+2*z0^2*z1^2*x1*y1^2*Ct-2*z0^2*x1^3*y1^2*Ct+2*z1^2*x1^3*y1^2*Ct+2*x1^5*y1^2*Ct+2*x1^3*y1^4*Ct))*x0+(-y0*z0*z1^4*y1*Ct^2-y0*z0*z1^2*x1^2*y1*Ct^2+3*y0*z0*z1^2*y1^3*Ct^2-y0*z0*x1^2*y1^3*Ct^2-y0*z0^3*z1^2*y1+y0*z0*z1^2*x1^2*y1-y0*z0^3*y1^3+y0*z0*x1^2*y1^3)/(2*z0^2*z1^3*y1^2*Ct^3-2*z1^5*y1^2*Ct^3+2*z0^2*z1*x1^2*y1^2*Ct^3-4*z1^3*x1^2*y1^2*Ct^3-2*z1*x1^4*y1^2*Ct^3-2*z1^3*y1^4*Ct^3-2*z1*x1^2*y1^4*Ct^3-2*z0^4*z1^3*Ct+2*z0^2*z1^5*Ct+2*z0^2*z1^3*x1^2*Ct+2*z0^2*z1^3*y1^2*Ct-2*z0^2*z1*x1^2*y1^2*Ct+2*z1^3*x1^2*y1^2*Ct+2*z1*x1^4*y1^2*Ct+2*z1*x1^2*y1^4*Ct)